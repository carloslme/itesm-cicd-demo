services:
  iris-ml-api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MODEL_VERSION=${MODEL_VERSION:-v1}
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - ./model_registry.json:/app/model_registry.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Separate services for testing different versions
  iris-ml-api-v1:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    ports:
      - "8001:8000"
    environment:
      - MODEL_VERSION=v1
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - ./model_registry.json:/app/model_registry.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - testing

  iris-ml-api-v2:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    ports:
      - "8002:8000"
    environment:
      - MODEL_VERSION=v2
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - ./model_registry.json:/app/model_registry.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - testing

  # Load balancer for production-like setup
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - iris-ml-api-v1
      - iris-ml-api-v2
    profiles:
      - production